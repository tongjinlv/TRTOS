; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\user\prj_insectv2\obj\stm32l1xx_aes_util.o --asm_dir=.\List\ --list_dir=.\List\ --depend=..\user\prj_insectv2\obj\stm32l1xx_aes_util.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\STM32L1xx_StdPeriph_Driver\inc -I..\Libraries\STM32L1xx_StdPeriph_Driver\src -I..\USER -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32L1xx -I..\Driver -I..\Configs -I..\Boot -I..\Tos -I..\Tools -I..\FS\TQFS -I..\USER\Prj_4.3LCD -I..\USER\Prj_CanBus -I..\USER\Prj_Sensor -I..\GUI\MGui -I..\FuncTask -I..\USER\Prj_Really -I..\USER\Prj_PdaTran -I..\USB\WHID -I..\FS -I..\GUI\TGui -I..\GUI -I..\Libraries\STM32L1xx_StdPeriph_Driver\inc -IE:\Soft\keil472a\ARM\RV31\INC -IE:\Soft\keil472a\ARM\CMSIS\Include -IE:\Soft\keil472a\ARM\Inc\ST\STM32L1xx -D__MICROLIB -DBOARD_InsectV2 -DUSE_STDPERIPH_DRIVER --omf_browse=..\user\prj_insectv2\obj\stm32l1xx_aes_util.crf ..\Libraries\STM32L1xx_StdPeriph_Driver\src\stm32l1xx_aes_util.c]
                          THUMB

                          AREA ||i.AES_CBC_Decrypt||, CODE, READONLY, ALIGN=1

                  AES_CBC_Decrypt PROC
;;;370      */
;;;371    ErrorStatus AES_CBC_Decrypt(uint8_t* Key, uint8_t InitVectors[16], uint8_t* Input, uint32_t Ilength, uint8_t* Output)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;372    {
000004  b08f              SUB      sp,sp,#0x3c
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
00000a  4692              MOV      r10,r2
00000c  469b              MOV      r11,r3
;;;373      AES_InitTypeDef AES_InitStructure;
;;;374      AES_KeyInitTypeDef  AES_KeyInitStructure;
;;;375      AES_IVInitTypeDef AES_IVInitStructure;
;;;376      ErrorStatus status = SUCCESS;
00000e  2001              MOVS     r0,#1
000010  9003              STR      r0,[sp,#0xc]
;;;377      uint32_t keyaddr    = (uint32_t)Key;
000012  4646              MOV      r6,r8
;;;378      uint32_t inputaddr  = (uint32_t)Input;
000014  4654              MOV      r4,r10
;;;379      uint32_t outputaddr = (uint32_t)Output;
000016  9d18              LDR      r5,[sp,#0x60]
;;;380      uint32_t ivaddr     = (uint32_t)InitVectors;
000018  464f              MOV      r7,r9
;;;381      __IO uint32_t counter = 0;
00001a  2000              MOVS     r0,#0
00001c  9002              STR      r0,[sp,#8]
;;;382      uint32_t ccstatus = 0;
00001e  9001              STR      r0,[sp,#4]
;;;383      uint32_t i = 0;
000020  9000              STR      r0,[sp,#0]
;;;384      
;;;385      /* AES Key initialisation*/
;;;386      AES_KeyInitStructure.AES_Key3 = __REV(*(uint32_t*)(keyaddr));
000022  6830              LDR      r0,[r6,#0]
000024  ba00              REV      r0,r0
000026  900b              STR      r0,[sp,#0x2c]
;;;387      keyaddr += 4;
000028  1d36              ADDS     r6,r6,#4
;;;388      AES_KeyInitStructure.AES_Key2 = __REV(*(uint32_t*)(keyaddr));
00002a  6830              LDR      r0,[r6,#0]
00002c  ba00              REV      r0,r0
00002e  900a              STR      r0,[sp,#0x28]
;;;389      keyaddr += 4;
000030  1d36              ADDS     r6,r6,#4
;;;390      AES_KeyInitStructure.AES_Key1 = __REV(*(uint32_t*)(keyaddr));
000032  6830              LDR      r0,[r6,#0]
000034  ba00              REV      r0,r0
000036  9009              STR      r0,[sp,#0x24]
;;;391      keyaddr += 4;
000038  1d36              ADDS     r6,r6,#4
;;;392      AES_KeyInitStructure.AES_Key0 = __REV(*(uint32_t*)(keyaddr));
00003a  6830              LDR      r0,[r6,#0]
00003c  ba00              REV      r0,r0
00003e  9008              STR      r0,[sp,#0x20]
;;;393      AES_KeyInit(&AES_KeyInitStructure);
000040  a808              ADD      r0,sp,#0x20
000042  f7fffffe          BL       AES_KeyInit
;;;394    
;;;395      /* AES Initialization Vectors */
;;;396      AES_IVInitStructure.AES_IV3 = __REV(*(uint32_t*)(ivaddr));
000046  6838              LDR      r0,[r7,#0]
000048  ba00              REV      r0,r0
00004a  9007              STR      r0,[sp,#0x1c]
;;;397      ivaddr += 4;
00004c  1d3f              ADDS     r7,r7,#4
;;;398      AES_IVInitStructure.AES_IV2 = __REV(*(uint32_t*)(ivaddr));
00004e  6838              LDR      r0,[r7,#0]
000050  ba00              REV      r0,r0
000052  9006              STR      r0,[sp,#0x18]
;;;399      ivaddr += 4;
000054  1d3f              ADDS     r7,r7,#4
;;;400      AES_IVInitStructure.AES_IV1 = __REV(*(uint32_t*)(ivaddr));
000056  6838              LDR      r0,[r7,#0]
000058  ba00              REV      r0,r0
00005a  9005              STR      r0,[sp,#0x14]
;;;401      ivaddr += 4;
00005c  1d3f              ADDS     r7,r7,#4
;;;402      AES_IVInitStructure.AES_IV0 = __REV(*(uint32_t*)(ivaddr));
00005e  6838              LDR      r0,[r7,#0]
000060  ba00              REV      r0,r0
000062  9004              STR      r0,[sp,#0x10]
;;;403      AES_IVInit(&AES_IVInitStructure);
000064  a804              ADD      r0,sp,#0x10
000066  f7fffffe          BL       AES_IVInit
;;;404    
;;;405      /* AES configuration */
;;;406      AES_InitStructure.AES_Operation = AES_Operation_KeyDerivAndDecryp;
00006a  2018              MOVS     r0,#0x18
00006c  900c              STR      r0,[sp,#0x30]
;;;407      AES_InitStructure.AES_Chaining = AES_Chaining_CBC;
00006e  2020              MOVS     r0,#0x20
000070  900d              STR      r0,[sp,#0x34]
;;;408      AES_InitStructure.AES_DataType = AES_DataType_8b;
000072  2004              MOVS     r0,#4
000074  900e              STR      r0,[sp,#0x38]
;;;409      AES_Init(&AES_InitStructure);
000076  a80c              ADD      r0,sp,#0x30
000078  f7fffffe          BL       AES_Init
;;;410    
;;;411      /* Enable AES */
;;;412      AES_Cmd(ENABLE);
00007c  2001              MOVS     r0,#1
00007e  f7fffffe          BL       AES_Cmd
;;;413    
;;;414      for(i = 0; ((i < Ilength) && (status != ERROR)); i += 16)
000082  2000              MOVS     r0,#0
000084  9000              STR      r0,[sp,#0]
000086  e03b              B        |L1.256|
                  |L1.136|
;;;415      {
;;;416        AES_WriteSubData(*(uint32_t*)(inputaddr));
000088  6820              LDR      r0,[r4,#0]
00008a  f7fffffe          BL       AES_WriteSubData
;;;417        inputaddr += 4;
00008e  1d24              ADDS     r4,r4,#4
;;;418        AES_WriteSubData(*(uint32_t*)(inputaddr));
000090  6820              LDR      r0,[r4,#0]
000092  f7fffffe          BL       AES_WriteSubData
;;;419        inputaddr += 4;
000096  1d24              ADDS     r4,r4,#4
;;;420        AES_WriteSubData(*(uint32_t*)(inputaddr));
000098  6820              LDR      r0,[r4,#0]
00009a  f7fffffe          BL       AES_WriteSubData
;;;421        inputaddr += 4;
00009e  1d24              ADDS     r4,r4,#4
;;;422        AES_WriteSubData(*(uint32_t*)(inputaddr));
0000a0  6820              LDR      r0,[r4,#0]
0000a2  f7fffffe          BL       AES_WriteSubData
;;;423        inputaddr += 4;
0000a6  1d24              ADDS     r4,r4,#4
;;;424        
;;;425        /* Wait for CCF flag to be set */
;;;426        counter = 0;
0000a8  2000              MOVS     r0,#0
0000aa  9002              STR      r0,[sp,#8]
;;;427        do
0000ac  bf00              NOP      
                  |L1.174|
;;;428        {
;;;429          ccstatus = AES_GetFlagStatus(AES_FLAG_CCF);
0000ae  2001              MOVS     r0,#1
0000b0  f7fffffe          BL       AES_GetFlagStatus
0000b4  9001              STR      r0,[sp,#4]
;;;430          counter++;
0000b6  9802              LDR      r0,[sp,#8]
0000b8  1c40              ADDS     r0,r0,#1
0000ba  9002              STR      r0,[sp,#8]
;;;431        }while((counter != AES_CC_TIMEOUT) && (ccstatus == RESET));
0000bc  9802              LDR      r0,[sp,#8]
0000be  f5b03f80          CMP      r0,#0x10000
0000c2  d002              BEQ      |L1.202|
0000c4  9801              LDR      r0,[sp,#4]
0000c6  2800              CMP      r0,#0
0000c8  d0f1              BEQ      |L1.174|
                  |L1.202|
;;;432    
;;;433        if (ccstatus == RESET)
0000ca  9801              LDR      r0,[sp,#4]
0000cc  b910              CBNZ     r0,|L1.212|
;;;434        {
;;;435          status = ERROR;
0000ce  2000              MOVS     r0,#0
0000d0  9003              STR      r0,[sp,#0xc]
0000d2  e012              B        |L1.250|
                  |L1.212|
;;;436        }
;;;437        else
;;;438        {
;;;439          /* Clear CCF flag */
;;;440          AES_ClearFlag(AES_FLAG_CCF);
0000d4  2001              MOVS     r0,#1
0000d6  f7fffffe          BL       AES_ClearFlag
;;;441    
;;;442          /* Read cipher text */
;;;443          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000da  f7fffffe          BL       AES_ReadSubData
0000de  6028              STR      r0,[r5,#0]
;;;444          outputaddr += 4;
0000e0  1d2d              ADDS     r5,r5,#4
;;;445          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000e2  f7fffffe          BL       AES_ReadSubData
0000e6  6028              STR      r0,[r5,#0]
;;;446          outputaddr += 4;
0000e8  1d2d              ADDS     r5,r5,#4
;;;447          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000ea  f7fffffe          BL       AES_ReadSubData
0000ee  6028              STR      r0,[r5,#0]
;;;448          outputaddr += 4;
0000f0  1d2d              ADDS     r5,r5,#4
;;;449          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000f2  f7fffffe          BL       AES_ReadSubData
0000f6  6028              STR      r0,[r5,#0]
;;;450          outputaddr += 4;
0000f8  1d2d              ADDS     r5,r5,#4
                  |L1.250|
0000fa  9800              LDR      r0,[sp,#0]            ;414
0000fc  3010              ADDS     r0,r0,#0x10           ;414
0000fe  9000              STR      r0,[sp,#0]            ;414
                  |L1.256|
000100  9800              LDR      r0,[sp,#0]            ;414
000102  4558              CMP      r0,r11                ;414
000104  d202              BCS      |L1.268|
000106  9803              LDR      r0,[sp,#0xc]          ;414
000108  2800              CMP      r0,#0                 ;414
00010a  d1bd              BNE      |L1.136|
                  |L1.268|
;;;451        }
;;;452      }
;;;453    
;;;454      /* Disable AES before starting new processing */
;;;455      AES_Cmd(DISABLE);
00010c  2000              MOVS     r0,#0
00010e  f7fffffe          BL       AES_Cmd
;;;456    
;;;457      return status;
000112  9803              LDR      r0,[sp,#0xc]
;;;458    }
000114  b00f              ADD      sp,sp,#0x3c
000116  e8bd8ff0          POP      {r4-r11,pc}
;;;459    
                          ENDP


                          AREA ||i.AES_CBC_Encrypt||, CODE, READONLY, ALIGN=1

                  AES_CBC_Encrypt PROC
;;;270      */
;;;271    ErrorStatus AES_CBC_Encrypt(uint8_t* Key, uint8_t InitVectors[16], uint8_t* Input, uint32_t Ilength, uint8_t* Output)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;272    {
000004  b08f              SUB      sp,sp,#0x3c
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
00000a  4692              MOV      r10,r2
00000c  469b              MOV      r11,r3
;;;273      AES_InitTypeDef AES_InitStructure;
;;;274      AES_KeyInitTypeDef  AES_KeyInitStructure;
;;;275      AES_IVInitTypeDef AES_IVInitStructure;
;;;276      ErrorStatus status = SUCCESS;
00000e  2001              MOVS     r0,#1
000010  9003              STR      r0,[sp,#0xc]
;;;277      uint32_t keyaddr    = (uint32_t)Key;
000012  4646              MOV      r6,r8
;;;278      uint32_t inputaddr  = (uint32_t)Input;
000014  4654              MOV      r4,r10
;;;279      uint32_t outputaddr = (uint32_t)Output;
000016  9d18              LDR      r5,[sp,#0x60]
;;;280      uint32_t ivaddr     = (uint32_t)InitVectors;
000018  464f              MOV      r7,r9
;;;281      __IO uint32_t counter = 0;
00001a  2000              MOVS     r0,#0
00001c  9002              STR      r0,[sp,#8]
;;;282      uint32_t ccstatus = 0;
00001e  9001              STR      r0,[sp,#4]
;;;283      uint32_t i = 0;
000020  9000              STR      r0,[sp,#0]
;;;284    
;;;285      /* AES Key initialisation*/
;;;286      AES_KeyInitStructure.AES_Key3 = __REV(*(uint32_t*)(keyaddr));
000022  6830              LDR      r0,[r6,#0]
000024  ba00              REV      r0,r0
000026  900b              STR      r0,[sp,#0x2c]
;;;287      keyaddr += 4;
000028  1d36              ADDS     r6,r6,#4
;;;288      AES_KeyInitStructure.AES_Key2 = __REV(*(uint32_t*)(keyaddr));
00002a  6830              LDR      r0,[r6,#0]
00002c  ba00              REV      r0,r0
00002e  900a              STR      r0,[sp,#0x28]
;;;289      keyaddr += 4;
000030  1d36              ADDS     r6,r6,#4
;;;290      AES_KeyInitStructure.AES_Key1 = __REV(*(uint32_t*)(keyaddr));
000032  6830              LDR      r0,[r6,#0]
000034  ba00              REV      r0,r0
000036  9009              STR      r0,[sp,#0x24]
;;;291      keyaddr += 4;
000038  1d36              ADDS     r6,r6,#4
;;;292      AES_KeyInitStructure.AES_Key0 = __REV(*(uint32_t*)(keyaddr));
00003a  6830              LDR      r0,[r6,#0]
00003c  ba00              REV      r0,r0
00003e  9008              STR      r0,[sp,#0x20]
;;;293      AES_KeyInit(&AES_KeyInitStructure);
000040  a808              ADD      r0,sp,#0x20
000042  f7fffffe          BL       AES_KeyInit
;;;294    
;;;295      /* AES Initialization Vectors */
;;;296      AES_IVInitStructure.AES_IV3 = __REV(*(uint32_t*)(ivaddr));
000046  6838              LDR      r0,[r7,#0]
000048  ba00              REV      r0,r0
00004a  9007              STR      r0,[sp,#0x1c]
;;;297      ivaddr += 4;
00004c  1d3f              ADDS     r7,r7,#4
;;;298      AES_IVInitStructure.AES_IV2 = __REV(*(uint32_t*)(ivaddr));
00004e  6838              LDR      r0,[r7,#0]
000050  ba00              REV      r0,r0
000052  9006              STR      r0,[sp,#0x18]
;;;299      ivaddr += 4;
000054  1d3f              ADDS     r7,r7,#4
;;;300      AES_IVInitStructure.AES_IV1 = __REV(*(uint32_t*)(ivaddr));
000056  6838              LDR      r0,[r7,#0]
000058  ba00              REV      r0,r0
00005a  9005              STR      r0,[sp,#0x14]
;;;301      ivaddr += 4;
00005c  1d3f              ADDS     r7,r7,#4
;;;302      AES_IVInitStructure.AES_IV0 = __REV(*(uint32_t*)(ivaddr));
00005e  6838              LDR      r0,[r7,#0]
000060  ba00              REV      r0,r0
000062  9004              STR      r0,[sp,#0x10]
;;;303      AES_IVInit(&AES_IVInitStructure);
000064  a804              ADD      r0,sp,#0x10
000066  f7fffffe          BL       AES_IVInit
;;;304    
;;;305      /* AES configuration */
;;;306      AES_InitStructure.AES_Operation = AES_Operation_Encryp;
00006a  2000              MOVS     r0,#0
00006c  900c              STR      r0,[sp,#0x30]
;;;307      AES_InitStructure.AES_Chaining = AES_Chaining_CBC;
00006e  2020              MOVS     r0,#0x20
000070  900d              STR      r0,[sp,#0x34]
;;;308      AES_InitStructure.AES_DataType = AES_DataType_8b;
000072  2004              MOVS     r0,#4
000074  900e              STR      r0,[sp,#0x38]
;;;309      AES_Init(&AES_InitStructure);
000076  a80c              ADD      r0,sp,#0x30
000078  f7fffffe          BL       AES_Init
;;;310    
;;;311      /* Enable AES */
;;;312      AES_Cmd(ENABLE);
00007c  2001              MOVS     r0,#1
00007e  f7fffffe          BL       AES_Cmd
;;;313    
;;;314      for(i = 0; ((i < Ilength) && (status != ERROR)); i += 16)
000082  2000              MOVS     r0,#0
000084  9000              STR      r0,[sp,#0]
000086  e03b              B        |L2.256|
                  |L2.136|
;;;315      {
;;;316        AES_WriteSubData(*(uint32_t*)(inputaddr));
000088  6820              LDR      r0,[r4,#0]
00008a  f7fffffe          BL       AES_WriteSubData
;;;317        inputaddr += 4;
00008e  1d24              ADDS     r4,r4,#4
;;;318        AES_WriteSubData(*(uint32_t*)(inputaddr));
000090  6820              LDR      r0,[r4,#0]
000092  f7fffffe          BL       AES_WriteSubData
;;;319        inputaddr += 4;
000096  1d24              ADDS     r4,r4,#4
;;;320        AES_WriteSubData(*(uint32_t*)(inputaddr));
000098  6820              LDR      r0,[r4,#0]
00009a  f7fffffe          BL       AES_WriteSubData
;;;321        inputaddr += 4;
00009e  1d24              ADDS     r4,r4,#4
;;;322        AES_WriteSubData(*(uint32_t*)(inputaddr));
0000a0  6820              LDR      r0,[r4,#0]
0000a2  f7fffffe          BL       AES_WriteSubData
;;;323        inputaddr += 4;
0000a6  1d24              ADDS     r4,r4,#4
;;;324        
;;;325        /* Wait for CCF flag to be set */
;;;326        counter = 0;
0000a8  2000              MOVS     r0,#0
0000aa  9002              STR      r0,[sp,#8]
;;;327        do
0000ac  bf00              NOP      
                  |L2.174|
;;;328        {
;;;329          ccstatus = AES_GetFlagStatus(AES_FLAG_CCF);
0000ae  2001              MOVS     r0,#1
0000b0  f7fffffe          BL       AES_GetFlagStatus
0000b4  9001              STR      r0,[sp,#4]
;;;330          counter++;
0000b6  9802              LDR      r0,[sp,#8]
0000b8  1c40              ADDS     r0,r0,#1
0000ba  9002              STR      r0,[sp,#8]
;;;331        }while((counter != AES_CC_TIMEOUT) && (ccstatus == RESET));
0000bc  9802              LDR      r0,[sp,#8]
0000be  f5b03f80          CMP      r0,#0x10000
0000c2  d002              BEQ      |L2.202|
0000c4  9801              LDR      r0,[sp,#4]
0000c6  2800              CMP      r0,#0
0000c8  d0f1              BEQ      |L2.174|
                  |L2.202|
;;;332        
;;;333        if (ccstatus == RESET)
0000ca  9801              LDR      r0,[sp,#4]
0000cc  b910              CBNZ     r0,|L2.212|
;;;334        {
;;;335          status = ERROR;
0000ce  2000              MOVS     r0,#0
0000d0  9003              STR      r0,[sp,#0xc]
0000d2  e012              B        |L2.250|
                  |L2.212|
;;;336        }
;;;337        else
;;;338        {
;;;339          /* Clear CCF flag */
;;;340          AES_ClearFlag(AES_FLAG_CCF);
0000d4  2001              MOVS     r0,#1
0000d6  f7fffffe          BL       AES_ClearFlag
;;;341    
;;;342          /* Read cipher text */
;;;343          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000da  f7fffffe          BL       AES_ReadSubData
0000de  6028              STR      r0,[r5,#0]
;;;344          outputaddr += 4;
0000e0  1d2d              ADDS     r5,r5,#4
;;;345          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000e2  f7fffffe          BL       AES_ReadSubData
0000e6  6028              STR      r0,[r5,#0]
;;;346          outputaddr += 4;
0000e8  1d2d              ADDS     r5,r5,#4
;;;347          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000ea  f7fffffe          BL       AES_ReadSubData
0000ee  6028              STR      r0,[r5,#0]
;;;348          outputaddr += 4;
0000f0  1d2d              ADDS     r5,r5,#4
;;;349          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000f2  f7fffffe          BL       AES_ReadSubData
0000f6  6028              STR      r0,[r5,#0]
;;;350          outputaddr += 4;
0000f8  1d2d              ADDS     r5,r5,#4
                  |L2.250|
0000fa  9800              LDR      r0,[sp,#0]            ;314
0000fc  3010              ADDS     r0,r0,#0x10           ;314
0000fe  9000              STR      r0,[sp,#0]            ;314
                  |L2.256|
000100  9800              LDR      r0,[sp,#0]            ;314
000102  4558              CMP      r0,r11                ;314
000104  d202              BCS      |L2.268|
000106  9803              LDR      r0,[sp,#0xc]          ;314
000108  2800              CMP      r0,#0                 ;314
00010a  d1bd              BNE      |L2.136|
                  |L2.268|
;;;351        }
;;;352      }
;;;353    
;;;354      /* Disable AES before starting new processing */
;;;355      AES_Cmd(DISABLE);
00010c  2000              MOVS     r0,#0
00010e  f7fffffe          BL       AES_Cmd
;;;356    
;;;357      return status;
000112  9803              LDR      r0,[sp,#0xc]
;;;358    }
000114  b00f              ADD      sp,sp,#0x3c
000116  e8bd8ff0          POP      {r4-r11,pc}
;;;359    
                          ENDP


                          AREA ||i.AES_CTR_Decrypt||, CODE, READONLY, ALIGN=1

                  AES_CTR_Decrypt PROC
;;;571      */
;;;572    ErrorStatus AES_CTR_Decrypt(uint8_t* Key, uint8_t InitVectors[16], uint8_t* Input, uint32_t Ilength, uint8_t* Output)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;573    {
000004  b08f              SUB      sp,sp,#0x3c
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
00000a  4692              MOV      r10,r2
00000c  469b              MOV      r11,r3
;;;574      AES_InitTypeDef AES_InitStructure;
;;;575      AES_KeyInitTypeDef  AES_KeyInitStructure;
;;;576      AES_IVInitTypeDef AES_IVInitStructure;
;;;577    
;;;578      ErrorStatus status = SUCCESS;
00000e  2001              MOVS     r0,#1
000010  9003              STR      r0,[sp,#0xc]
;;;579      uint32_t keyaddr    = (uint32_t)Key;
000012  4646              MOV      r6,r8
;;;580      uint32_t inputaddr  = (uint32_t)Input;
000014  4654              MOV      r4,r10
;;;581      uint32_t outputaddr = (uint32_t)Output;
000016  9d18              LDR      r5,[sp,#0x60]
;;;582      uint32_t ivaddr     = (uint32_t)InitVectors;
000018  464f              MOV      r7,r9
;;;583      __IO uint32_t counter = 0;
00001a  2000              MOVS     r0,#0
00001c  9002              STR      r0,[sp,#8]
;;;584      uint32_t ccstatus = 0;
00001e  9001              STR      r0,[sp,#4]
;;;585      uint32_t i = 0;
000020  9000              STR      r0,[sp,#0]
;;;586    
;;;587      /* AES Key initialisation*/
;;;588      AES_KeyInitStructure.AES_Key3 = __REV(*(uint32_t*)(keyaddr));
000022  6830              LDR      r0,[r6,#0]
000024  ba00              REV      r0,r0
000026  900b              STR      r0,[sp,#0x2c]
;;;589      keyaddr += 4;
000028  1d36              ADDS     r6,r6,#4
;;;590      AES_KeyInitStructure.AES_Key2 = __REV(*(uint32_t*)(keyaddr));
00002a  6830              LDR      r0,[r6,#0]
00002c  ba00              REV      r0,r0
00002e  900a              STR      r0,[sp,#0x28]
;;;591      keyaddr += 4;
000030  1d36              ADDS     r6,r6,#4
;;;592      AES_KeyInitStructure.AES_Key1 = __REV(*(uint32_t*)(keyaddr));
000032  6830              LDR      r0,[r6,#0]
000034  ba00              REV      r0,r0
000036  9009              STR      r0,[sp,#0x24]
;;;593      keyaddr += 4;
000038  1d36              ADDS     r6,r6,#4
;;;594      AES_KeyInitStructure.AES_Key0 = __REV(*(uint32_t*)(keyaddr));
00003a  6830              LDR      r0,[r6,#0]
00003c  ba00              REV      r0,r0
00003e  9008              STR      r0,[sp,#0x20]
;;;595      AES_KeyInit(&AES_KeyInitStructure);
000040  a808              ADD      r0,sp,#0x20
000042  f7fffffe          BL       AES_KeyInit
;;;596    
;;;597      /* AES Initialization Vectors */
;;;598      AES_IVInitStructure.AES_IV3 = __REV(*(uint32_t*)(ivaddr));
000046  6838              LDR      r0,[r7,#0]
000048  ba00              REV      r0,r0
00004a  9007              STR      r0,[sp,#0x1c]
;;;599      ivaddr += 4;
00004c  1d3f              ADDS     r7,r7,#4
;;;600      AES_IVInitStructure.AES_IV2 = __REV(*(uint32_t*)(ivaddr));
00004e  6838              LDR      r0,[r7,#0]
000050  ba00              REV      r0,r0
000052  9006              STR      r0,[sp,#0x18]
;;;601      ivaddr += 4;
000054  1d3f              ADDS     r7,r7,#4
;;;602      AES_IVInitStructure.AES_IV1 = __REV(*(uint32_t*)(ivaddr));
000056  6838              LDR      r0,[r7,#0]
000058  ba00              REV      r0,r0
00005a  9005              STR      r0,[sp,#0x14]
;;;603      ivaddr += 4;
00005c  1d3f              ADDS     r7,r7,#4
;;;604      AES_IVInitStructure.AES_IV0 = __REV(*(uint32_t*)(ivaddr));
00005e  6838              LDR      r0,[r7,#0]
000060  ba00              REV      r0,r0
000062  9004              STR      r0,[sp,#0x10]
;;;605      AES_IVInit(&AES_IVInitStructure);
000064  a804              ADD      r0,sp,#0x10
000066  f7fffffe          BL       AES_IVInit
;;;606    
;;;607      /* AES configuration */
;;;608      AES_InitStructure.AES_Operation = AES_Operation_KeyDerivAndDecryp;
00006a  2018              MOVS     r0,#0x18
00006c  900c              STR      r0,[sp,#0x30]
;;;609      AES_InitStructure.AES_Chaining = AES_Chaining_CTR;
00006e  2040              MOVS     r0,#0x40
000070  900d              STR      r0,[sp,#0x34]
;;;610      AES_InitStructure.AES_DataType = AES_DataType_8b;
000072  2004              MOVS     r0,#4
000074  900e              STR      r0,[sp,#0x38]
;;;611      AES_Init(&AES_InitStructure);
000076  a80c              ADD      r0,sp,#0x30
000078  f7fffffe          BL       AES_Init
;;;612    
;;;613      /* Enable AES */
;;;614      AES_Cmd(ENABLE);
00007c  2001              MOVS     r0,#1
00007e  f7fffffe          BL       AES_Cmd
;;;615    
;;;616      for(i = 0; ((i < Ilength) && (status != ERROR)); i += 16)
000082  2000              MOVS     r0,#0
000084  9000              STR      r0,[sp,#0]
000086  e03b              B        |L3.256|
                  |L3.136|
;;;617      {
;;;618        AES_WriteSubData(*(uint32_t*)(inputaddr));
000088  6820              LDR      r0,[r4,#0]
00008a  f7fffffe          BL       AES_WriteSubData
;;;619        inputaddr += 4;
00008e  1d24              ADDS     r4,r4,#4
;;;620        AES_WriteSubData(*(uint32_t*)(inputaddr));
000090  6820              LDR      r0,[r4,#0]
000092  f7fffffe          BL       AES_WriteSubData
;;;621        inputaddr += 4;
000096  1d24              ADDS     r4,r4,#4
;;;622        AES_WriteSubData(*(uint32_t*)(inputaddr));
000098  6820              LDR      r0,[r4,#0]
00009a  f7fffffe          BL       AES_WriteSubData
;;;623        inputaddr += 4;
00009e  1d24              ADDS     r4,r4,#4
;;;624        AES_WriteSubData(*(uint32_t*)(inputaddr));
0000a0  6820              LDR      r0,[r4,#0]
0000a2  f7fffffe          BL       AES_WriteSubData
;;;625        inputaddr += 4;
0000a6  1d24              ADDS     r4,r4,#4
;;;626        
;;;627        /* Wait for CCF flag to be set */
;;;628        counter = 0;
0000a8  2000              MOVS     r0,#0
0000aa  9002              STR      r0,[sp,#8]
;;;629        do
0000ac  bf00              NOP      
                  |L3.174|
;;;630        {
;;;631          ccstatus = AES_GetFlagStatus(AES_FLAG_CCF);
0000ae  2001              MOVS     r0,#1
0000b0  f7fffffe          BL       AES_GetFlagStatus
0000b4  9001              STR      r0,[sp,#4]
;;;632          counter++;
0000b6  9802              LDR      r0,[sp,#8]
0000b8  1c40              ADDS     r0,r0,#1
0000ba  9002              STR      r0,[sp,#8]
;;;633        }while((counter != AES_CC_TIMEOUT) && (ccstatus == RESET));
0000bc  9802              LDR      r0,[sp,#8]
0000be  f5b03f80          CMP      r0,#0x10000
0000c2  d002              BEQ      |L3.202|
0000c4  9801              LDR      r0,[sp,#4]
0000c6  2800              CMP      r0,#0
0000c8  d0f1              BEQ      |L3.174|
                  |L3.202|
;;;634    
;;;635        if (ccstatus == RESET)
0000ca  9801              LDR      r0,[sp,#4]
0000cc  b910              CBNZ     r0,|L3.212|
;;;636        {
;;;637          status = ERROR;
0000ce  2000              MOVS     r0,#0
0000d0  9003              STR      r0,[sp,#0xc]
0000d2  e012              B        |L3.250|
                  |L3.212|
;;;638        }
;;;639        else
;;;640        {
;;;641          /* Clear CCF flag */
;;;642          AES_ClearFlag(AES_FLAG_CCF);
0000d4  2001              MOVS     r0,#1
0000d6  f7fffffe          BL       AES_ClearFlag
;;;643        
;;;644          /* Read cipher text */
;;;645          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000da  f7fffffe          BL       AES_ReadSubData
0000de  6028              STR      r0,[r5,#0]
;;;646          outputaddr += 4;
0000e0  1d2d              ADDS     r5,r5,#4
;;;647          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000e2  f7fffffe          BL       AES_ReadSubData
0000e6  6028              STR      r0,[r5,#0]
;;;648          outputaddr += 4;
0000e8  1d2d              ADDS     r5,r5,#4
;;;649          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000ea  f7fffffe          BL       AES_ReadSubData
0000ee  6028              STR      r0,[r5,#0]
;;;650          outputaddr += 4;
0000f0  1d2d              ADDS     r5,r5,#4
;;;651          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000f2  f7fffffe          BL       AES_ReadSubData
0000f6  6028              STR      r0,[r5,#0]
;;;652          outputaddr += 4;
0000f8  1d2d              ADDS     r5,r5,#4
                  |L3.250|
0000fa  9800              LDR      r0,[sp,#0]            ;616
0000fc  3010              ADDS     r0,r0,#0x10           ;616
0000fe  9000              STR      r0,[sp,#0]            ;616
                  |L3.256|
000100  9800              LDR      r0,[sp,#0]            ;616
000102  4558              CMP      r0,r11                ;616
000104  d202              BCS      |L3.268|
000106  9803              LDR      r0,[sp,#0xc]          ;616
000108  2800              CMP      r0,#0                 ;616
00010a  d1bd              BNE      |L3.136|
                  |L3.268|
;;;653        }
;;;654      }
;;;655    
;;;656      /* Disable AES before starting new processing */
;;;657      AES_Cmd(DISABLE);
00010c  2000              MOVS     r0,#0
00010e  f7fffffe          BL       AES_Cmd
;;;658    
;;;659      return status;
000112  9803              LDR      r0,[sp,#0xc]
;;;660    }
000114  b00f              ADD      sp,sp,#0x3c
000116  e8bd8ff0          POP      {r4-r11,pc}
;;;661    
                          ENDP


                          AREA ||i.AES_CTR_Encrypt||, CODE, READONLY, ALIGN=1

                  AES_CTR_Encrypt PROC
;;;470      */
;;;471    ErrorStatus AES_CTR_Encrypt(uint8_t* Key, uint8_t InitVectors[16], uint8_t* Input, uint32_t Ilength, uint8_t* Output)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;472    {
000004  b08f              SUB      sp,sp,#0x3c
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
00000a  4692              MOV      r10,r2
00000c  469b              MOV      r11,r3
;;;473      AES_InitTypeDef AES_InitStructure;
;;;474      AES_KeyInitTypeDef  AES_KeyInitStructure;
;;;475      AES_IVInitTypeDef AES_IVInitStructure;
;;;476    
;;;477      ErrorStatus status = SUCCESS;
00000e  2001              MOVS     r0,#1
000010  9003              STR      r0,[sp,#0xc]
;;;478      uint32_t keyaddr    = (uint32_t)Key;
000012  4646              MOV      r6,r8
;;;479      uint32_t inputaddr  = (uint32_t)Input;
000014  4654              MOV      r4,r10
;;;480      uint32_t outputaddr = (uint32_t)Output;
000016  9d18              LDR      r5,[sp,#0x60]
;;;481      uint32_t ivaddr     = (uint32_t)InitVectors;
000018  464f              MOV      r7,r9
;;;482      __IO uint32_t counter = 0;
00001a  2000              MOVS     r0,#0
00001c  9002              STR      r0,[sp,#8]
;;;483      uint32_t ccstatus = 0;
00001e  9001              STR      r0,[sp,#4]
;;;484      uint32_t i = 0;
000020  9000              STR      r0,[sp,#0]
;;;485    
;;;486      /* AES key initialisation*/
;;;487      AES_KeyInitStructure.AES_Key3 = __REV(*(uint32_t*)(keyaddr));
000022  6830              LDR      r0,[r6,#0]
000024  ba00              REV      r0,r0
000026  900b              STR      r0,[sp,#0x2c]
;;;488      keyaddr += 4;
000028  1d36              ADDS     r6,r6,#4
;;;489      AES_KeyInitStructure.AES_Key2 = __REV(*(uint32_t*)(keyaddr));
00002a  6830              LDR      r0,[r6,#0]
00002c  ba00              REV      r0,r0
00002e  900a              STR      r0,[sp,#0x28]
;;;490      keyaddr += 4;
000030  1d36              ADDS     r6,r6,#4
;;;491      AES_KeyInitStructure.AES_Key1 = __REV(*(uint32_t*)(keyaddr));
000032  6830              LDR      r0,[r6,#0]
000034  ba00              REV      r0,r0
000036  9009              STR      r0,[sp,#0x24]
;;;492      keyaddr += 4;
000038  1d36              ADDS     r6,r6,#4
;;;493      AES_KeyInitStructure.AES_Key0 = __REV(*(uint32_t*)(keyaddr));
00003a  6830              LDR      r0,[r6,#0]
00003c  ba00              REV      r0,r0
00003e  9008              STR      r0,[sp,#0x20]
;;;494      AES_KeyInit(&AES_KeyInitStructure);
000040  a808              ADD      r0,sp,#0x20
000042  f7fffffe          BL       AES_KeyInit
;;;495    
;;;496      /* AES Initialization Vectors */
;;;497      AES_IVInitStructure.AES_IV3 = __REV(*(uint32_t*)(ivaddr));
000046  6838              LDR      r0,[r7,#0]
000048  ba00              REV      r0,r0
00004a  9007              STR      r0,[sp,#0x1c]
;;;498      ivaddr += 4;
00004c  1d3f              ADDS     r7,r7,#4
;;;499      AES_IVInitStructure.AES_IV2= __REV(*(uint32_t*)(ivaddr));
00004e  6838              LDR      r0,[r7,#0]
000050  ba00              REV      r0,r0
000052  9006              STR      r0,[sp,#0x18]
;;;500      ivaddr += 4;
000054  1d3f              ADDS     r7,r7,#4
;;;501      AES_IVInitStructure.AES_IV1 = __REV(*(uint32_t*)(ivaddr));
000056  6838              LDR      r0,[r7,#0]
000058  ba00              REV      r0,r0
00005a  9005              STR      r0,[sp,#0x14]
;;;502      ivaddr += 4;
00005c  1d3f              ADDS     r7,r7,#4
;;;503      AES_IVInitStructure.AES_IV0= __REV(*(uint32_t*)(ivaddr));
00005e  6838              LDR      r0,[r7,#0]
000060  ba00              REV      r0,r0
000062  9004              STR      r0,[sp,#0x10]
;;;504      AES_IVInit(&AES_IVInitStructure);
000064  a804              ADD      r0,sp,#0x10
000066  f7fffffe          BL       AES_IVInit
;;;505    
;;;506      /* AES configuration */
;;;507      AES_InitStructure.AES_Operation = AES_Operation_Encryp;
00006a  2000              MOVS     r0,#0
00006c  900c              STR      r0,[sp,#0x30]
;;;508      AES_InitStructure.AES_Chaining = AES_Chaining_CTR;
00006e  2040              MOVS     r0,#0x40
000070  900d              STR      r0,[sp,#0x34]
;;;509      AES_InitStructure.AES_DataType = AES_DataType_8b;
000072  2004              MOVS     r0,#4
000074  900e              STR      r0,[sp,#0x38]
;;;510      AES_Init(&AES_InitStructure);
000076  a80c              ADD      r0,sp,#0x30
000078  f7fffffe          BL       AES_Init
;;;511    
;;;512      /* Enable AES */
;;;513      AES_Cmd(ENABLE);
00007c  2001              MOVS     r0,#1
00007e  f7fffffe          BL       AES_Cmd
;;;514    
;;;515      for(i = 0; ((i < Ilength) && (status != ERROR)); i += 16)
000082  2000              MOVS     r0,#0
000084  9000              STR      r0,[sp,#0]
000086  e03b              B        |L4.256|
                  |L4.136|
;;;516      {
;;;517        AES_WriteSubData(*(uint32_t*)(inputaddr));
000088  6820              LDR      r0,[r4,#0]
00008a  f7fffffe          BL       AES_WriteSubData
;;;518        inputaddr += 4;
00008e  1d24              ADDS     r4,r4,#4
;;;519        AES_WriteSubData(*(uint32_t*)(inputaddr));
000090  6820              LDR      r0,[r4,#0]
000092  f7fffffe          BL       AES_WriteSubData
;;;520        inputaddr += 4;
000096  1d24              ADDS     r4,r4,#4
;;;521        AES_WriteSubData(*(uint32_t*)(inputaddr));
000098  6820              LDR      r0,[r4,#0]
00009a  f7fffffe          BL       AES_WriteSubData
;;;522        inputaddr += 4;
00009e  1d24              ADDS     r4,r4,#4
;;;523        AES_WriteSubData(*(uint32_t*)(inputaddr));
0000a0  6820              LDR      r0,[r4,#0]
0000a2  f7fffffe          BL       AES_WriteSubData
;;;524        inputaddr += 4;
0000a6  1d24              ADDS     r4,r4,#4
;;;525        
;;;526        /* Wait for CCF flag to be set */
;;;527        counter = 0;
0000a8  2000              MOVS     r0,#0
0000aa  9002              STR      r0,[sp,#8]
;;;528        do
0000ac  bf00              NOP      
                  |L4.174|
;;;529        {
;;;530          ccstatus = AES_GetFlagStatus(AES_FLAG_CCF);
0000ae  2001              MOVS     r0,#1
0000b0  f7fffffe          BL       AES_GetFlagStatus
0000b4  9001              STR      r0,[sp,#4]
;;;531          counter++;
0000b6  9802              LDR      r0,[sp,#8]
0000b8  1c40              ADDS     r0,r0,#1
0000ba  9002              STR      r0,[sp,#8]
;;;532        }while((counter != AES_CC_TIMEOUT) && (ccstatus == RESET));
0000bc  9802              LDR      r0,[sp,#8]
0000be  f5b03f80          CMP      r0,#0x10000
0000c2  d002              BEQ      |L4.202|
0000c4  9801              LDR      r0,[sp,#4]
0000c6  2800              CMP      r0,#0
0000c8  d0f1              BEQ      |L4.174|
                  |L4.202|
;;;533    
;;;534        if (ccstatus == RESET)
0000ca  9801              LDR      r0,[sp,#4]
0000cc  b910              CBNZ     r0,|L4.212|
;;;535        {
;;;536          status = ERROR;
0000ce  2000              MOVS     r0,#0
0000d0  9003              STR      r0,[sp,#0xc]
0000d2  e012              B        |L4.250|
                  |L4.212|
;;;537        }
;;;538        else
;;;539        {
;;;540          /* Clear CCF flag */
;;;541          AES_ClearFlag(AES_FLAG_CCF);
0000d4  2001              MOVS     r0,#1
0000d6  f7fffffe          BL       AES_ClearFlag
;;;542    
;;;543          /* Read cipher text */
;;;544          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000da  f7fffffe          BL       AES_ReadSubData
0000de  6028              STR      r0,[r5,#0]
;;;545          outputaddr += 4;
0000e0  1d2d              ADDS     r5,r5,#4
;;;546          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000e2  f7fffffe          BL       AES_ReadSubData
0000e6  6028              STR      r0,[r5,#0]
;;;547          outputaddr += 4;
0000e8  1d2d              ADDS     r5,r5,#4
;;;548          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000ea  f7fffffe          BL       AES_ReadSubData
0000ee  6028              STR      r0,[r5,#0]
;;;549          outputaddr += 4;
0000f0  1d2d              ADDS     r5,r5,#4
;;;550          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000f2  f7fffffe          BL       AES_ReadSubData
0000f6  6028              STR      r0,[r5,#0]
;;;551          outputaddr += 4;
0000f8  1d2d              ADDS     r5,r5,#4
                  |L4.250|
0000fa  9800              LDR      r0,[sp,#0]            ;515
0000fc  3010              ADDS     r0,r0,#0x10           ;515
0000fe  9000              STR      r0,[sp,#0]            ;515
                  |L4.256|
000100  9800              LDR      r0,[sp,#0]            ;515
000102  4558              CMP      r0,r11                ;515
000104  d202              BCS      |L4.268|
000106  9803              LDR      r0,[sp,#0xc]          ;515
000108  2800              CMP      r0,#0                 ;515
00010a  d1bd              BNE      |L4.136|
                  |L4.268|
;;;552        }
;;;553      }
;;;554    
;;;555      /* Disable AES before starting new processing */
;;;556      AES_Cmd(DISABLE);
00010c  2000              MOVS     r0,#0
00010e  f7fffffe          BL       AES_Cmd
;;;557    
;;;558      return status;
000112  9803              LDR      r0,[sp,#0xc]
;;;559    }
000114  b00f              ADD      sp,sp,#0x3c
000116  e8bd8ff0          POP      {r4-r11,pc}
;;;560    
                          ENDP


                          AREA ||i.AES_ECB_Decrypt||, CODE, READONLY, ALIGN=1

                  AES_ECB_Decrypt PROC
;;;182      */
;;;183    ErrorStatus AES_ECB_Decrypt(uint8_t* Key, uint8_t* Input, uint32_t Ilength, uint8_t* Output)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;184    {
000004  b08b              SUB      sp,sp,#0x2c
000006  4607              MOV      r7,r0
000008  4688              MOV      r8,r1
00000a  4691              MOV      r9,r2
00000c  469a              MOV      r10,r3
;;;185      AES_InitTypeDef AES_InitStructure;
;;;186      AES_KeyInitTypeDef  AES_KeyInitStructure;
;;;187      ErrorStatus status = SUCCESS;
00000e  2001              MOVS     r0,#1
000010  9003              STR      r0,[sp,#0xc]
;;;188      uint32_t keyaddr    = (uint32_t)Key;
000012  463e              MOV      r6,r7
;;;189      uint32_t inputaddr  = (uint32_t)Input;
000014  4644              MOV      r4,r8
;;;190      uint32_t outputaddr = (uint32_t)Output;
000016  4655              MOV      r5,r10
;;;191      __IO uint32_t counter = 0;
000018  2000              MOVS     r0,#0
00001a  9002              STR      r0,[sp,#8]
;;;192      uint32_t ccstatus = 0;
00001c  4683              MOV      r11,r0
;;;193      uint32_t i = 0;
00001e  9001              STR      r0,[sp,#4]
;;;194    
;;;195      /* AES Key initialisation */
;;;196      AES_KeyInitStructure.AES_Key3 = __REV(*(uint32_t*)(keyaddr));
000020  6830              LDR      r0,[r6,#0]
000022  ba00              REV      r0,r0
000024  9007              STR      r0,[sp,#0x1c]
;;;197      keyaddr += 4;
000026  1d36              ADDS     r6,r6,#4
;;;198      AES_KeyInitStructure.AES_Key2 = __REV(*(uint32_t*)(keyaddr));
000028  6830              LDR      r0,[r6,#0]
00002a  ba00              REV      r0,r0
00002c  9006              STR      r0,[sp,#0x18]
;;;199      keyaddr += 4;
00002e  1d36              ADDS     r6,r6,#4
;;;200      AES_KeyInitStructure.AES_Key1 = __REV(*(uint32_t*)(keyaddr));
000030  6830              LDR      r0,[r6,#0]
000032  ba00              REV      r0,r0
000034  9005              STR      r0,[sp,#0x14]
;;;201      keyaddr += 4;
000036  1d36              ADDS     r6,r6,#4
;;;202      AES_KeyInitStructure.AES_Key0 = __REV(*(uint32_t*)(keyaddr));
000038  6830              LDR      r0,[r6,#0]
00003a  ba00              REV      r0,r0
00003c  9004              STR      r0,[sp,#0x10]
;;;203      AES_KeyInit(&AES_KeyInitStructure);
00003e  a804              ADD      r0,sp,#0x10
000040  f7fffffe          BL       AES_KeyInit
;;;204    
;;;205      /* AES configuration */
;;;206      AES_InitStructure.AES_Operation = AES_Operation_KeyDerivAndDecryp;
000044  2018              MOVS     r0,#0x18
000046  9008              STR      r0,[sp,#0x20]
;;;207      AES_InitStructure.AES_Chaining = AES_Chaining_ECB;
000048  2000              MOVS     r0,#0
00004a  9009              STR      r0,[sp,#0x24]
;;;208      AES_InitStructure.AES_DataType = AES_DataType_8b;
00004c  2004              MOVS     r0,#4
00004e  900a              STR      r0,[sp,#0x28]
;;;209      AES_Init(&AES_InitStructure);
000050  a808              ADD      r0,sp,#0x20
000052  f7fffffe          BL       AES_Init
;;;210    
;;;211      /* Enable AES */
;;;212      AES_Cmd(ENABLE);
000056  2001              MOVS     r0,#1
000058  f7fffffe          BL       AES_Cmd
;;;213    
;;;214      for(i = 0; ((i < Ilength) && (status != ERROR)); i += 16)
00005c  2000              MOVS     r0,#0
00005e  9001              STR      r0,[sp,#4]
000060  e03c              B        |L5.220|
                  |L5.98|
;;;215      {
;;;216        AES_WriteSubData(*(uint32_t*)(inputaddr));
000062  6820              LDR      r0,[r4,#0]
000064  f7fffffe          BL       AES_WriteSubData
;;;217        inputaddr += 4;
000068  1d24              ADDS     r4,r4,#4
;;;218        AES_WriteSubData(*(uint32_t*)(inputaddr));
00006a  6820              LDR      r0,[r4,#0]
00006c  f7fffffe          BL       AES_WriteSubData
;;;219        inputaddr += 4;
000070  1d24              ADDS     r4,r4,#4
;;;220        AES_WriteSubData(*(uint32_t*)(inputaddr));
000072  6820              LDR      r0,[r4,#0]
000074  f7fffffe          BL       AES_WriteSubData
;;;221        inputaddr += 4;
000078  1d24              ADDS     r4,r4,#4
;;;222        AES_WriteSubData(*(uint32_t*)(inputaddr));
00007a  6820              LDR      r0,[r4,#0]
00007c  f7fffffe          BL       AES_WriteSubData
;;;223        inputaddr += 4;
000080  1d24              ADDS     r4,r4,#4
;;;224        
;;;225         /* Wait for CCF flag to be set */
;;;226        counter = 0;
000082  2000              MOVS     r0,#0
000084  9002              STR      r0,[sp,#8]
;;;227        do
000086  bf00              NOP      
                  |L5.136|
;;;228        {
;;;229          ccstatus = AES_GetFlagStatus(AES_FLAG_CCF);
000088  2001              MOVS     r0,#1
00008a  f7fffffe          BL       AES_GetFlagStatus
00008e  4683              MOV      r11,r0
;;;230          counter++;
000090  9802              LDR      r0,[sp,#8]
000092  1c40              ADDS     r0,r0,#1
000094  9002              STR      r0,[sp,#8]
;;;231        }while((counter != AES_CC_TIMEOUT) && (ccstatus == RESET));
000096  9802              LDR      r0,[sp,#8]
000098  f5b03f80          CMP      r0,#0x10000
00009c  d002              BEQ      |L5.164|
00009e  f1bb0f00          CMP      r11,#0
0000a2  d0f1              BEQ      |L5.136|
                  |L5.164|
;;;232        
;;;233        if (ccstatus == RESET)
0000a4  f1bb0f00          CMP      r11,#0
0000a8  d102              BNE      |L5.176|
;;;234        {
;;;235          status = ERROR;
0000aa  2000              MOVS     r0,#0
0000ac  9003              STR      r0,[sp,#0xc]
0000ae  e012              B        |L5.214|
                  |L5.176|
;;;236        }
;;;237        else
;;;238        {
;;;239          /* Clear CCF flag */
;;;240          AES_ClearFlag(AES_FLAG_CCF);
0000b0  2001              MOVS     r0,#1
0000b2  f7fffffe          BL       AES_ClearFlag
;;;241    
;;;242          /* Read cipher text */
;;;243          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000b6  f7fffffe          BL       AES_ReadSubData
0000ba  6028              STR      r0,[r5,#0]
;;;244          outputaddr += 4;
0000bc  1d2d              ADDS     r5,r5,#4
;;;245          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000be  f7fffffe          BL       AES_ReadSubData
0000c2  6028              STR      r0,[r5,#0]
;;;246          outputaddr += 4;
0000c4  1d2d              ADDS     r5,r5,#4
;;;247          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000c6  f7fffffe          BL       AES_ReadSubData
0000ca  6028              STR      r0,[r5,#0]
;;;248          outputaddr += 4;
0000cc  1d2d              ADDS     r5,r5,#4
;;;249          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000ce  f7fffffe          BL       AES_ReadSubData
0000d2  6028              STR      r0,[r5,#0]
;;;250          outputaddr += 4;
0000d4  1d2d              ADDS     r5,r5,#4
                  |L5.214|
0000d6  9801              LDR      r0,[sp,#4]            ;214
0000d8  3010              ADDS     r0,r0,#0x10           ;214
0000da  9001              STR      r0,[sp,#4]            ;214
                  |L5.220|
0000dc  9801              LDR      r0,[sp,#4]            ;214
0000de  4548              CMP      r0,r9                 ;214
0000e0  d202              BCS      |L5.232|
0000e2  9803              LDR      r0,[sp,#0xc]          ;214
0000e4  2800              CMP      r0,#0                 ;214
0000e6  d1bc              BNE      |L5.98|
                  |L5.232|
;;;251        }
;;;252      }
;;;253    
;;;254      /* Disable AES before starting new processing */
;;;255      AES_Cmd(DISABLE);
0000e8  2000              MOVS     r0,#0
0000ea  f7fffffe          BL       AES_Cmd
;;;256    
;;;257      return status;
0000ee  9803              LDR      r0,[sp,#0xc]
;;;258    }
0000f0  b00b              ADD      sp,sp,#0x2c
0000f2  e8bd8ff0          POP      {r4-r11,pc}
;;;259    
                          ENDP


                          AREA ||i.AES_ECB_Encrypt||, CODE, READONLY, ALIGN=1

                  AES_ECB_Encrypt PROC
;;;96       */
;;;97     ErrorStatus AES_ECB_Encrypt(uint8_t* Key, uint8_t* Input, uint32_t Ilength, uint8_t* Output)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;98     {
000004  b08b              SUB      sp,sp,#0x2c
000006  4607              MOV      r7,r0
000008  4688              MOV      r8,r1
00000a  4691              MOV      r9,r2
00000c  469a              MOV      r10,r3
;;;99       AES_InitTypeDef AES_InitStructure;
;;;100      AES_KeyInitTypeDef  AES_KeyInitStructure;
;;;101      ErrorStatus status = SUCCESS;
00000e  2001              MOVS     r0,#1
000010  9003              STR      r0,[sp,#0xc]
;;;102      uint32_t keyaddr    = (uint32_t)Key;
000012  463e              MOV      r6,r7
;;;103      uint32_t inputaddr  = (uint32_t)Input;
000014  4644              MOV      r4,r8
;;;104      uint32_t outputaddr = (uint32_t)Output;
000016  4655              MOV      r5,r10
;;;105      __IO uint32_t counter = 0;
000018  2000              MOVS     r0,#0
00001a  9002              STR      r0,[sp,#8]
;;;106      uint32_t ccstatus = 0;
00001c  4683              MOV      r11,r0
;;;107      uint32_t i = 0;
00001e  9001              STR      r0,[sp,#4]
;;;108    
;;;109      /* AES Key initialisation */
;;;110      AES_KeyInitStructure.AES_Key3 = __REV(*(uint32_t*)(keyaddr));
000020  6830              LDR      r0,[r6,#0]
000022  ba00              REV      r0,r0
000024  9007              STR      r0,[sp,#0x1c]
;;;111      keyaddr += 4;
000026  1d36              ADDS     r6,r6,#4
;;;112      AES_KeyInitStructure.AES_Key2 = __REV(*(uint32_t*)(keyaddr));
000028  6830              LDR      r0,[r6,#0]
00002a  ba00              REV      r0,r0
00002c  9006              STR      r0,[sp,#0x18]
;;;113      keyaddr += 4;
00002e  1d36              ADDS     r6,r6,#4
;;;114      AES_KeyInitStructure.AES_Key1 = __REV(*(uint32_t*)(keyaddr));
000030  6830              LDR      r0,[r6,#0]
000032  ba00              REV      r0,r0
000034  9005              STR      r0,[sp,#0x14]
;;;115      keyaddr += 4;
000036  1d36              ADDS     r6,r6,#4
;;;116      AES_KeyInitStructure.AES_Key0 = __REV(*(uint32_t*)(keyaddr));
000038  6830              LDR      r0,[r6,#0]
00003a  ba00              REV      r0,r0
00003c  9004              STR      r0,[sp,#0x10]
;;;117      AES_KeyInit(&AES_KeyInitStructure);
00003e  a804              ADD      r0,sp,#0x10
000040  f7fffffe          BL       AES_KeyInit
;;;118    
;;;119      /* AES configuration */
;;;120      AES_InitStructure.AES_Operation = AES_Operation_Encryp;
000044  2000              MOVS     r0,#0
000046  9008              STR      r0,[sp,#0x20]
;;;121      AES_InitStructure.AES_Chaining = AES_Chaining_ECB;
000048  9009              STR      r0,[sp,#0x24]
;;;122      AES_InitStructure.AES_DataType = AES_DataType_8b;
00004a  2004              MOVS     r0,#4
00004c  900a              STR      r0,[sp,#0x28]
;;;123      AES_Init(&AES_InitStructure);
00004e  a808              ADD      r0,sp,#0x20
000050  f7fffffe          BL       AES_Init
;;;124    
;;;125      /* Enable AES */
;;;126      AES_Cmd(ENABLE);
000054  2001              MOVS     r0,#1
000056  f7fffffe          BL       AES_Cmd
;;;127    
;;;128      for(i = 0; ((i < Ilength) && (status != ERROR)); i += 16)
00005a  2000              MOVS     r0,#0
00005c  9001              STR      r0,[sp,#4]
00005e  e03c              B        |L6.218|
                  |L6.96|
;;;129      {
;;;130        AES_WriteSubData(*(uint32_t*)(inputaddr));
000060  6820              LDR      r0,[r4,#0]
000062  f7fffffe          BL       AES_WriteSubData
;;;131        inputaddr += 4;
000066  1d24              ADDS     r4,r4,#4
;;;132        AES_WriteSubData(*(uint32_t*)(inputaddr));
000068  6820              LDR      r0,[r4,#0]
00006a  f7fffffe          BL       AES_WriteSubData
;;;133        inputaddr += 4;
00006e  1d24              ADDS     r4,r4,#4
;;;134        AES_WriteSubData(*(uint32_t*)(inputaddr));
000070  6820              LDR      r0,[r4,#0]
000072  f7fffffe          BL       AES_WriteSubData
;;;135        inputaddr += 4;
000076  1d24              ADDS     r4,r4,#4
;;;136        AES_WriteSubData(*(uint32_t*)(inputaddr));
000078  6820              LDR      r0,[r4,#0]
00007a  f7fffffe          BL       AES_WriteSubData
;;;137        inputaddr += 4;
00007e  1d24              ADDS     r4,r4,#4
;;;138        
;;;139        /* Wait for CCF flag to be set */
;;;140        counter = 0;
000080  2000              MOVS     r0,#0
000082  9002              STR      r0,[sp,#8]
;;;141        do
000084  bf00              NOP      
                  |L6.134|
;;;142        {
;;;143          ccstatus = AES_GetFlagStatus(AES_FLAG_CCF);
000086  2001              MOVS     r0,#1
000088  f7fffffe          BL       AES_GetFlagStatus
00008c  4683              MOV      r11,r0
;;;144          counter++;
00008e  9802              LDR      r0,[sp,#8]
000090  1c40              ADDS     r0,r0,#1
000092  9002              STR      r0,[sp,#8]
;;;145        }while((counter != AES_CC_TIMEOUT) && (ccstatus == RESET));
000094  9802              LDR      r0,[sp,#8]
000096  f5b03f80          CMP      r0,#0x10000
00009a  d002              BEQ      |L6.162|
00009c  f1bb0f00          CMP      r11,#0
0000a0  d0f1              BEQ      |L6.134|
                  |L6.162|
;;;146        
;;;147        if (ccstatus == RESET)
0000a2  f1bb0f00          CMP      r11,#0
0000a6  d102              BNE      |L6.174|
;;;148        {
;;;149          status = ERROR;
0000a8  2000              MOVS     r0,#0
0000aa  9003              STR      r0,[sp,#0xc]
0000ac  e012              B        |L6.212|
                  |L6.174|
;;;150        }
;;;151        else
;;;152        {
;;;153          /* Clear CCF flag */
;;;154          AES_ClearFlag(AES_FLAG_CCF);
0000ae  2001              MOVS     r0,#1
0000b0  f7fffffe          BL       AES_ClearFlag
;;;155          /* Read cipher text */
;;;156          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000b4  f7fffffe          BL       AES_ReadSubData
0000b8  6028              STR      r0,[r5,#0]
;;;157          outputaddr += 4;
0000ba  1d2d              ADDS     r5,r5,#4
;;;158          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000bc  f7fffffe          BL       AES_ReadSubData
0000c0  6028              STR      r0,[r5,#0]
;;;159          outputaddr += 4;
0000c2  1d2d              ADDS     r5,r5,#4
;;;160          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000c4  f7fffffe          BL       AES_ReadSubData
0000c8  6028              STR      r0,[r5,#0]
;;;161          outputaddr += 4;
0000ca  1d2d              ADDS     r5,r5,#4
;;;162          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000cc  f7fffffe          BL       AES_ReadSubData
0000d0  6028              STR      r0,[r5,#0]
;;;163          outputaddr += 4;
0000d2  1d2d              ADDS     r5,r5,#4
                  |L6.212|
0000d4  9801              LDR      r0,[sp,#4]            ;128
0000d6  3010              ADDS     r0,r0,#0x10           ;128
0000d8  9001              STR      r0,[sp,#4]            ;128
                  |L6.218|
0000da  9801              LDR      r0,[sp,#4]            ;128
0000dc  4548              CMP      r0,r9                 ;128
0000de  d202              BCS      |L6.230|
0000e0  9803              LDR      r0,[sp,#0xc]          ;128
0000e2  2800              CMP      r0,#0                 ;128
0000e4  d1bc              BNE      |L6.96|
                  |L6.230|
;;;164        }
;;;165      }
;;;166      
;;;167      /* Disable AES before starting new processing */
;;;168      AES_Cmd(DISABLE);
0000e6  2000              MOVS     r0,#0
0000e8  f7fffffe          BL       AES_Cmd
;;;169    
;;;170      return status;
0000ec  9803              LDR      r0,[sp,#0xc]
;;;171    }
0000ee  b00b              ADD      sp,sp,#0x2c
0000f0  e8bd8ff0          POP      {r4-r11,pc}
;;;172    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Libraries\\STM32L1xx_StdPeriph_Driver\\src\\stm32l1xx_aes_util.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___20_stm32l1xx_aes_util_c_2d88a9bb____REV16|
#line 113 "..\\Libraries\\CMSIS\\CM3\\CoreSupport\\core_cmInstr.h"
|__asm___20_stm32l1xx_aes_util_c_2d88a9bb____REV16| PROC
#line 114

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___20_stm32l1xx_aes_util_c_2d88a9bb____REVSH|
#line 131
|__asm___20_stm32l1xx_aes_util_c_2d88a9bb____REVSH| PROC
#line 132

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
