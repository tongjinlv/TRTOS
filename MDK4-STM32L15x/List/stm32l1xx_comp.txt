; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\user\prj_insectv2\obj\stm32l1xx_comp.o --asm_dir=.\List\ --list_dir=.\List\ --depend=..\user\prj_insectv2\obj\stm32l1xx_comp.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\STM32L1xx_StdPeriph_Driver\inc -I..\Libraries\STM32L1xx_StdPeriph_Driver\src -I..\USER -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32L1xx -I..\Driver -I..\Configs -I..\Boot -I..\Tos -I..\Tools -I..\FS\TQFS -I..\USER\Prj_4.3LCD -I..\USER\Prj_CanBus -I..\USER\Prj_Sensor -I..\GUI\MGui -I..\FuncTask -I..\USER\Prj_Really -I..\USER\Prj_PdaTran -I..\USB\WHID -I..\FS -I..\GUI\TGui -I..\GUI -I..\Libraries\STM32L1xx_StdPeriph_Driver\inc -IE:\Soft\keil472a\ARM\RV31\INC -IE:\Soft\keil472a\ARM\CMSIS\Include -IE:\Soft\keil472a\ARM\Inc\ST\STM32L1xx -D__MICROLIB -DBOARD_InsectV2 -DUSE_STDPERIPH_DRIVER --omf_browse=..\user\prj_insectv2\obj\stm32l1xx_comp.crf ..\Libraries\STM32L1xx_StdPeriph_Driver\src\stm32l1xx_comp.c]
                          THUMB

                          AREA ||i.COMP_Cmd||, CODE, READONLY, ALIGN=2

                  COMP_Cmd PROC
;;;171      */
;;;172    void COMP_Cmd(FunctionalState NewState)
000000  b130              CBZ      r0,|L1.16|
;;;173    {
;;;174      /* Check the parameter */
;;;175      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;176    
;;;177      if (NewState != DISABLE)
;;;178      {
;;;179        /* Enable the COMP1 */
;;;180        COMP->CSR |= (uint32_t) COMP_CSR_CMP1EN;
000002  4907              LDR      r1,|L1.32|
000004  6809              LDR      r1,[r1,#0]
000006  f0410110          ORR      r1,r1,#0x10
00000a  4a05              LDR      r2,|L1.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L1.28|
                  |L1.16|
;;;181      }
;;;182      else
;;;183      {
;;;184        /* Disable the COMP1  */
;;;185        COMP->CSR &= (uint32_t)(~COMP_CSR_CMP1EN);
000010  4903              LDR      r1,|L1.32|
000012  6809              LDR      r1,[r1,#0]
000014  f0210110          BIC      r1,r1,#0x10
000018  4a01              LDR      r2,|L1.32|
00001a  6011              STR      r1,[r2,#0]
                  |L1.28|
;;;186      }
;;;187    }
00001c  4770              BX       lr
;;;188    
                          ENDP

00001e  0000              DCW      0x0000
                  |L1.32|
                          DCD      0x40007c00

                          AREA ||i.COMP_DeInit||, CODE, READONLY, ALIGN=2

                  COMP_DeInit PROC
;;;115      */
;;;116    void COMP_DeInit(void)
000000  2000              MOVS     r0,#0
;;;117    {
;;;118      COMP->CSR = ((uint32_t)0x00000000);    /*!< Set COMP->CSR to reset value */
000002  4901              LDR      r1,|L2.8|
000004  6008              STR      r0,[r1,#0]
;;;119    }
000006  4770              BX       lr
;;;120    
                          ENDP

                  |L2.8|
                          DCD      0x40007c00

                          AREA ||i.COMP_GetOutputLevel||, CODE, READONLY, ALIGN=2

                  COMP_GetOutputLevel PROC
;;;203      */
;;;204    uint8_t COMP_GetOutputLevel(uint32_t COMP_Selection)
000000  4601              MOV      r1,r0
;;;205    {
;;;206      uint8_t compout = 0x0;
000002  2000              MOVS     r0,#0
;;;207    
;;;208      /* Check the parameters */
;;;209      assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));
;;;210    
;;;211      /* Check if Comparator 1 is selected */
;;;212      if(COMP_Selection == COMP_Selection_COMP1)
000004  2901              CMP      r1,#1
000006  d108              BNE      |L3.26|
;;;213      {
;;;214        /* Check if comparator 1 output level is high */
;;;215        if((COMP->CSR & COMP_CSR_CMP1OUT) != (uint8_t) RESET)
000008  4a08              LDR      r2,|L3.44|
00000a  6812              LDR      r2,[r2,#0]
00000c  f0120f80          TST      r2,#0x80
000010  d001              BEQ      |L3.22|
;;;216        {
;;;217          /* Get Comparator 1 output level */
;;;218          compout = (uint8_t) COMP_OutputLevel_High;
000012  2001              MOVS     r0,#1
000014  e009              B        |L3.42|
                  |L3.22|
;;;219        }
;;;220        /* comparator 1 output level is low */
;;;221        else
;;;222        {
;;;223          /* Get Comparator 1 output level */
;;;224          compout = (uint8_t) COMP_OutputLevel_Low;
000016  2000              MOVS     r0,#0
000018  e007              B        |L3.42|
                  |L3.26|
;;;225        }
;;;226      }
;;;227      /* Comparator 2 is selected */
;;;228      else
;;;229      {
;;;230        /* Check if comparator 2 output level is high */
;;;231        if((COMP->CSR & COMP_CSR_CMP2OUT) != (uint8_t) RESET)
00001a  4a04              LDR      r2,|L3.44|
00001c  6812              LDR      r2,[r2,#0]
00001e  f4125f00          TST      r2,#0x2000
000022  d001              BEQ      |L3.40|
;;;232        {
;;;233          /* Get Comparator output level */
;;;234          compout = (uint8_t) COMP_OutputLevel_High;
000024  2001              MOVS     r0,#1
000026  e000              B        |L3.42|
                  |L3.40|
;;;235        }
;;;236        /* comparator 2 output level is low */
;;;237        else
;;;238        {
;;;239          /* Get Comparator 2 output level */
;;;240          compout = (uint8_t) COMP_OutputLevel_Low;
000028  2000              MOVS     r0,#0
                  |L3.42|
;;;241        }
;;;242      }
;;;243      /* Return the comparator output level */
;;;244      return (uint8_t)(compout);
;;;245    }
00002a  4770              BX       lr
;;;246    
                          ENDP

                  |L3.44|
                          DCD      0x40007c00

                          AREA ||i.COMP_Init||, CODE, READONLY, ALIGN=2

                  COMP_Init PROC
;;;130      */
;;;131    void COMP_Init(COMP_InitTypeDef* COMP_InitStruct)
000000  2100              MOVS     r1,#0
;;;132    {
;;;133      uint32_t tmpreg = 0;
;;;134      
;;;135      /* Check the parameters */
;;;136      assert_param(IS_COMP_INVERTING_INPUT(COMP_InitStruct->COMP_InvertingInput));
;;;137      assert_param(IS_COMP_OUTPUT(COMP_InitStruct->COMP_OutputSelect));
;;;138      assert_param(IS_COMP_SPEED(COMP_InitStruct->COMP_Speed));
;;;139    
;;;140      /*!< Get the COMP CSR value */
;;;141      tmpreg = COMP->CSR;
000002  4a06              LDR      r2,|L4.28|
000004  6811              LDR      r1,[r2,#0]
;;;142    
;;;143      /*!< Clear the  INSEL[2:0], OUTSEL[1:0] and SPEED bits */ 
;;;144      tmpreg &= (uint32_t) (~(uint32_t) (COMP_CSR_OUTSEL | COMP_CSR_INSEL | COMP_CSR_SPEED));
000006  4a06              LDR      r2,|L4.32|
000008  4011              ANDS     r1,r1,r2
;;;145      
;;;146      /*!< Configure COMP: speed, inversion input selection and output redirection */
;;;147      /*!< Set SPEED bit according to COMP_InitStruct->COMP_Speed value */
;;;148      /*!< Set INSEL bits according to COMP_InitStruct->COMP_InvertingInput value */ 
;;;149      /*!< Set OUTSEL bits according to COMP_InitStruct->COMP_OutputSelect value */  
;;;150      tmpreg |= (uint32_t)((COMP_InitStruct->COMP_Speed | COMP_InitStruct->COMP_InvertingInput 
00000a  e9d02300          LDRD     r2,r3,[r0,#0]
00000e  431a              ORRS     r2,r2,r3
000010  6883              LDR      r3,[r0,#8]
000012  431a              ORRS     r2,r2,r3
000014  4311              ORRS     r1,r1,r2
;;;151                            | COMP_InitStruct->COMP_OutputSelect));
;;;152    
;;;153      /*!< The COMP2 comparator is enabled as soon as the INSEL[2:0] bits value are 
;;;154         different from "000" */
;;;155      /*!< Write to COMP_CSR register */
;;;156      COMP->CSR = tmpreg;  
000016  4a01              LDR      r2,|L4.28|
000018  6011              STR      r1,[r2,#0]
;;;157    }
00001a  4770              BX       lr
;;;158    
                          ENDP

                  |L4.28|
                          DCD      0x40007c00
                  |L4.32|
                          DCD      0xff03efff

                          AREA ||i.COMP_SW1SwitchConfig||, CODE, READONLY, ALIGN=2

                  COMP_SW1SwitchConfig PROC
;;;254      */
;;;255    void COMP_SW1SwitchConfig(FunctionalState NewState)
000000  b130              CBZ      r0,|L5.16|
;;;256    {
;;;257      /* Check the parameters */
;;;258      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;259    
;;;260      if (NewState != DISABLE)
;;;261      {
;;;262        /* Close SW1 switch */
;;;263        COMP->CSR |= (uint32_t) COMP_CSR_SW1;
000002  4907              LDR      r1,|L5.32|
000004  6809              LDR      r1,[r1,#0]
000006  f0410120          ORR      r1,r1,#0x20
00000a  4a05              LDR      r2,|L5.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L5.28|
                  |L5.16|
;;;264      }
;;;265      else
;;;266      {
;;;267        /* Open SW1 switch */
;;;268        COMP->CSR &= (uint32_t)(~COMP_CSR_SW1);
000010  4903              LDR      r1,|L5.32|
000012  6809              LDR      r1,[r1,#0]
000014  f0210120          BIC      r1,r1,#0x20
000018  4a01              LDR      r2,|L5.32|
00001a  6011              STR      r1,[r2,#0]
                  |L5.28|
;;;269      }
;;;270    }
00001c  4770              BX       lr
;;;271    
                          ENDP

00001e  0000              DCW      0x0000
                  |L5.32|
                          DCD      0x40007c00

                          AREA ||i.COMP_VrefintOutputCmd||, CODE, READONLY, ALIGN=2

                  COMP_VrefintOutputCmd PROC
;;;344      */
;;;345    void COMP_VrefintOutputCmd(FunctionalState NewState)
000000  b130              CBZ      r0,|L6.16|
;;;346    {
;;;347      /* Check the parameters */
;;;348      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;349    
;;;350      if (NewState != DISABLE)
;;;351      {
;;;352        /* Enable the output of internal reference voltage */
;;;353        COMP->CSR |= (uint32_t) COMP_CSR_VREFOUTEN;
000002  4907              LDR      r1,|L6.32|
000004  6809              LDR      r1,[r1,#0]
000006  f4413180          ORR      r1,r1,#0x10000
00000a  4a05              LDR      r2,|L6.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L6.28|
                  |L6.16|
;;;354      }
;;;355      else
;;;356      {
;;;357        /* Disable the output of internal reference voltage */
;;;358        COMP->CSR &= (uint32_t) (~COMP_CSR_VREFOUTEN);
000010  4903              LDR      r1,|L6.32|
000012  6809              LDR      r1,[r1,#0]
000014  f4213180          BIC      r1,r1,#0x10000
000018  4a01              LDR      r2,|L6.32|
00001a  6011              STR      r1,[r2,#0]
                  |L6.28|
;;;359      }
;;;360    }
00001c  4770              BX       lr
;;;361    
                          ENDP

00001e  0000              DCW      0x0000
                  |L6.32|
                          DCD      0x40007c00

                          AREA ||i.COMP_WindowCmd||, CODE, READONLY, ALIGN=2

                  COMP_WindowCmd PROC
;;;301      */
;;;302    void COMP_WindowCmd(FunctionalState NewState)
000000  b130              CBZ      r0,|L7.16|
;;;303    {
;;;304      /* Check the parameters */
;;;305      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;306      
;;;307      if (NewState != DISABLE)
;;;308      {
;;;309        /* Enable the window mode */
;;;310        COMP->CSR |= (uint32_t) COMP_CSR_WNDWE;
000002  4907              LDR      r1,|L7.32|
000004  6809              LDR      r1,[r1,#0]
000006  f4413100          ORR      r1,r1,#0x20000
00000a  4a05              LDR      r2,|L7.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L7.28|
                  |L7.16|
;;;311      }
;;;312      else
;;;313      {
;;;314        /* Disable the window mode */
;;;315        COMP->CSR &= (uint32_t)(~COMP_CSR_WNDWE);
000010  4903              LDR      r1,|L7.32|
000012  6809              LDR      r1,[r1,#0]
000014  f4213100          BIC      r1,r1,#0x20000
000018  4a01              LDR      r2,|L7.32|
00001a  6011              STR      r1,[r2,#0]
                  |L7.28|
;;;316      }
;;;317    }
00001c  4770              BX       lr
;;;318    
                          ENDP

00001e  0000              DCW      0x0000
                  |L7.32|
                          DCD      0x40007c00

;*** Start embedded assembler ***

#line 1 "..\\Libraries\\STM32L1xx_StdPeriph_Driver\\src\\stm32l1xx_comp.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32l1xx_comp_c_66e338f6____REV16|
#line 113 "..\\Libraries\\CMSIS\\CM3\\CoreSupport\\core_cmInstr.h"
|__asm___16_stm32l1xx_comp_c_66e338f6____REV16| PROC
#line 114

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32l1xx_comp_c_66e338f6____REVSH|
#line 131
|__asm___16_stm32l1xx_comp_c_66e338f6____REVSH| PROC
#line 132

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
